problem 1

function fixed_point_solver(f, x0; α=1.0, max_iter=1000, ϵ=1e-6)
    x = x0
    xs = [x0]  
    residuals = [abs(f(x) - x)]  #  residuals
    
    for i in 1:max_iter
        x_new = (1 - α) * x + α * f(x)  # dampening
        xs = [xs; x_new]
        residuals = [residuals; abs(f(x_new) - x_new)]
        
        if abs(x_new - x) < ϵ
            # Solution found, return results :)
            return (0, x_new, abs(x_new - f(x_new)), xs, residuals)
        end
        x = x_new
    end
    
    # If solution not found, return NaN :(
    return (1, NaN, NaN, xs, residuals)
end

# Testing our solver with f(x) = (x + 1)^(1/3)-x

f(x) = (x + 1)^(1/3)-x
x0 = 1.0  # Initial guess
α = 0  # Dampening parameter which now is 0 (maximum possible)

flag, solution, abs_diff, xs, residuals = fixed_point_solver(f, x0, α=α)

println("Flag: $flag")
println("Solution: $solution")
println("Absolute difference: $abs_diff")
println("Last iterates: ", xs[end-4:end])  # Here we have an error because I think with such extrenme dampening we can't really move from the initial guess...We'll check for other values of parameters alpha
println("Last residuals: ", residuals[end-4:end])  # Similar...













function fixed_point_solver(f, x0; α=1.0, max_iter=1000, ϵ=1e-6) # now in its generic form dampening is not happening; also maxiter and tolerance are default (not stated otherwise)
    x = x0
    xs = [x0]  # Storing our iterates here
    residuals = [abs(f(x) - x)]  # Storing our residuals here
    
    for i in 1:max_iter
        x_new = (1 - α) * x + α * f(x)
        push!(xs, x_new)
        push!(residuals, abs(f(x_new) - x_new))
        
        if abs(x_new - x) < ϵ
            return (0, x_new, abs(x_new - f(x_new)), xs, residuals)
        end
        x = x_new
    end
    
    return (1, NaN, NaN, xs, residuals)
end

# Testing our solver with f(x) = (x + 1)^(1/3)-x

f(x) = (x + 1)^(1/3)-x
x0 = 1.0  # Initial guess
α = 0  # Dampening parameter which now is 0 (maximum possible)

flag, solution, abs_diff, xs, residuals = fixed_point_solver(f, x0, α=α)

println("Flag: $flag")
println("Solution: $solution")
println("Absolute difference: $abs_diff")
println("Last iterates: ", xs[end-4:end])  # Here we have an error because I think with such extrenme dampening we can't really move from the initial guess...We'll check for other values of parameters alpha
println("Last residuals: ", residuals[end-4:end])  # Similar...







# Testing our solver with f(x) = (x + 1)^(1/3) but different parameters
f(x) = (x + 1)^(1/3)-x

x0 = 1.0  # Initial guess
α = 0.7  # Dampening parameter which now is 0 (maximum possible)

flag, solution, abs_diff, xs, residuals = fixed_point_solver(f, x0, α=α)

println("Flag: $flag")
println("Solution: $solution")
println("Absolute difference: $abs_diff")
println("Last iterates: ", xs[end-4:end])  # Here we have something working :)
println("Last residuals: ", residuals[end-4:end])  # And here but the result is wrong!  i dont get it....

# Testing our solver with f(x) = (x + 1)^(1/3) but different parameters
f(x) = x^3-x-1
x0 = 1.0  # Initial guess
α = 0.7  # Dampening parameter which now is 0 (maximum possible)

flag, solution, abs_diff, xs, residuals = fixed_point_solver(f, x0, α=α)

println("Flag: $flag")
println("Solution: $solution")
println("Absolute difference: $abs_diff")
println("Last iterates: ", xs[end-4:end])  # Here we have something working :)
println("Last residuals: ", residuals[end-4:end])  

function fixed_point_solver(f, x0; damp=1.0, max_iter=1000, tol=1e-6) #renaming parameters checking again omg
    x = x0
    xs = [x0] 
    residuals = [abs(f(x) - x)]  

    if damp == 0
        # No iteration will happen; return early
        return (0, x0, abs(x0 - f(x0)), xs, residuals)
    end

    for i in 1:max_iter
        x_new = (1 - damp) * x + damp * f(x)
        push!(xs, x_new)
        push!(residuals, abs(f(x_new) - x_new))

        if abs(x_new - x) < tol
            return (0, x_new, abs(x_new - f(x_new)), xs, residuals)
        end
        x = x_new
    end

    return (1, NaN, NaN, xs, residuals)
end

# Test case with damp = 0
f(x) = (x + 1)^(1/3)-x
x0 = 1.0

flag, solution, abs_diff, xs, residuals = fixed_point_solver(f, x0, damp=0.3)

println("Flag: $flag")
println("Solution: $solution")
println("Absolute difference: $abs_diff")
println("Iterates: ", xs)
println("Residuals: ", residuals)


function fixed_point_solver(f, x0; damp=0.5, max_iter=1000, tol=1e-6)
    x = x0
    xs = [x0]  
    residuals = [abs(f(x) - x)]  

    if damp == 0
        # No iteration will happen; return early
        return (0, x0, abs(x0 - f(x0)), xs, residuals)
    end

    for i in 1:max_iter
        x_new = (1 - damp) * x + damp * f(x)
        push!(xs, x_new)
        push!(residuals, abs(f(x_new) - x_new))

        if abs(x_new - x) < tol
            return (0, x_new, abs(x_new - f(x_new)), xs, residuals)
        end
        x = x_new
    end

    return (1, NaN, NaN, xs, residuals)
end

# Test case with damp = 0
f(x) = (x + 1)^(1/3)
x0 = 3.0

flag, solution, abs_diff, xs, residuals = fixed_point_solver(f, x0, damp=0.5)

println("Flag: $flag")
println("Solution: $solution")
println("Absolute difference: $abs_diff")
println("Iterates: ", xs)
println("Residuals: ", residuals)


function newton_method(f, f_prime, x0; max_iter=1000, tol=1e-6)
    x = x0
    for i in 1:max_iter
        fx = f(x)
        fx_prime = f_prime(x)
        if abs(fx_prime) < tol  # Avoid division by zero
            return (1, NaN, NaN, [], [])  # Fail if derivative is too small
        end
        x_new = x - fx / fx_prime
        if abs(x_new - x) < tol  # Convergence check
            return (0, x_new, abs(x_new - f(x_new)), [x], [abs(f(x_new) - x_new)])
        end
        x = x_new
    end
    return (1, NaN, NaN, [], [])
end



problem 2


    # Define the 5x5 matrix A I'm not sure if i understood manually correctly
    A = [1 0 0 a-b b;
         0 1 0 0 0;
         0 0 1 0 0;
         0 0 0 1 0;
         0 0 0 0 1]
    
    
    B = [a, 1, 1, 1, 1]
    
    
    x_exact = exact_solution(a, b) #  exact solution
    
   
    x_numerical = A \ B #backslash
    
    
    residual = norm(A * x_numerical - B) / norm(B) #  rr ||A * x_numerical - B|| / ||B||
    
  
    cond_number = cond(A)  #  condition number 
    
    return x_exact, x_numerical, residual, cond_number
end


function generate_table()
    a = 0.1  # Fixed a value
    b_values = [1.0, 10.0, 100.0, 1e3, 1e6, 1e9, 1e12]  # Different values for b
    
    println("b\t\tx1_exact\t\tx1_numerical\tCond(A)\t\tRelative Residual")
    for b in b_values
        x_exact, x_numerical, residual, cond_number = solve_system(a, b)
        println("$(b)\t$(x_exact[1])\t\t$(x_numerical[1])\t\t$(cond_number)\t$(residual)")
    end
end
generate_table()
using LinearAlgebra



problem 1
function newton_method(f, f_prime, x0; max_iter=1000, tol=1e-6)
    x = x0
    for i in 1:max_iter
    fx = f(x)
    fx_prime = f_prime(x)
    if abs(fx_prime) < tol 
    return (1, NaN, NaN, [], [])  
    end
    x_new = x - fx / fx_prime
    if abs(x_new - x) < tol  
    return (0, x_new, abs(x_new - f(x_new)), [x], [abs(f(x_new) - x_new)])
    end
    x = x_new
    end
    return (1, NaN, NaN, [], [])
    end
    
   
    f(x) = x^4-3x^2 #just a random function
    f_prime(x) = 4x^3-6x
    
    
    x0 = -10.0 #1st guess
    flag, solution, abs_diff, xs, residuals = newton_method(f, f_prime, x0)
    
    println("Flag: $flag")
    println("Solution: $solution")
    println("Absolute difference: $abs_diff")
    println("Iterates: ", xs)
    println("Residuals: ", residuals)


alt problem 1

function newton_method(f, f_prime, x0; damp=1.0, max_iter=1000, tol=1e-6)
    x = x0
    iterates = Float64[]  
    residuals = Float64[]  

    for i in 1:max_iter
        fx = f(x)
        fx_prime = f_prime(x)

        
        push!(iterates, x)
        push!(residuals, abs(fx))
            if abs(fx_prime) < tol
            println("Derivative near zero. Stopping iteration.")
            return (1, NaN, NaN, iterates, residuals)
        end
         x_new = x - damp * fx / fx_prime

       
        if abs(x_new - x) < tol
            return (0, x_new, abs(f(x_new)), iterates, residuals)
        end

        x = x_new
    end

    # If max_iter is reached without convergence
    return (1, NaN, NaN, iterates, residuals)
end


f(x) = x^4 - 3x^2
f_prime(x) = 4x^3 - 6x

# Initial guess
x0 = -10.0


flag, solution, abs_diff, xs, residuals = newton_method(f, f_prime, x0; damp=0.5)


println("Flag: $flag")
println("Solution: $solution")
println("Absolute difference: $abs_diff")
println("Iterates: ", xs)
println("Residuals: ", residuals)


using NLsolve 

function NPV(r, C)
    n = length(C)
    npv = sum(C[t] / (1 + r)^(t - 1) for t in 1:n)
    return npv
end

Problem 3

        r = r_vec[1]  # The thing to do is to get the scalar outta the vector
        return [NPV(r, C)]  # Return as a vector because NLsolve demands
    end
    
    # Initial guess for IRR (as a vector)
    r_guess = [0.1]  # This can be changed if necessary 

    # NLsolve shoud be able to find the root hopefully
    result = nlsolve(nlsolve_func, r_guess)
    
    # Extract the IRR from the result
    irr = result.zero[1]  # The root is stored as a vector
    return irr
end

# random arbitrary flows: Initial investment -100, 30, 40, 50, 60
C = [-100, 30, 40, 50, 60]
#works :)
# Calculate the internal rate of return (IRR)
irr = internal_rate(C)
println("Internal Rate of Return (IRR): ", irr)
internal_rate([−5, 0, 0, 2.5, 5])

internal_rate([−5, 0, 0, 2.5, 5])

#yay i think it runnssss
